AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A new VPC creation for EKS LandingZone. VPC, IGW, NATGW, 2 Public Subnets, 2 Private Subnets (each per AZ) and 3 route tables get created

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: VPC Configuration
        Parameters:
          - VpcCidr
          - AvailabilityZones
          - PubMgmtSubnetAz1Cidr
          - PubMgmtSubnetAz2Cidr
          - PrivK8sSubnetAz1Cidr
          - PrivK8sSubnetAz2Cidr
      - Label:
          default: Multus networks
        Parameters:
          - MultusSubnet1Az1Cidr
          - MultusSubnet1Az2Cidr
          - MultusSubnet2Az1Cidr
          - MultusSubnet2Az2Cidr
      - Label:
          default: Bastion Configuration
        Parameters:
          - BastionInstanceType
          - BastionKeyPairName
          - LatestAmiId

Parameters:
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC. Select 2 of them.
    AllowedPattern : ".+"
    Type: List<AWS::EC2::AvailabilityZone::Name>
  VpcCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
    Type: String
  PubMgmtSubnetAz1Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.0.0/24
    Description: CIDR block for the Public Subnet in AZ1.
    Type: String
  PubMgmtSubnetAz2Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.1.0/24
    Description: CIDR block for the Public Subnet in AZ2.
    Type: String
  PrivK8sSubnetAz1Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.2.0/24
    Description: CIDR block for the Private Subnet in AZ1. This will be used for the main K8s network.
    Type: String
  PrivK8sSubnetAz2Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.3.0/24
    Description: CIDR block for the Private Subnet in AZ2. This will be used for the main K8s network.
    Type: String
  MultusSubnet1Az1Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.4.0/24
    Description: CIDR block for the Private Subnet in AZ1. This will be used for Control Plane.
    Type: String
  MultusSubnet1Az2Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.5.0/24
    Description: CIDR block for the Private Subnet in AZ2. This will be used for Control Plane.
    Type: String
  MultusSubnet2Az1Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.6.0/24
    Description: CIDR block for the Private Subnet in AZ1. This will be used for User Plane.
    Type: String
  MultusSubnet2Az2Cidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16–28
    Default: 10.0.7.0/24
    Description: CIDR block for the Private Subnet in AZ2. This will be used for User Plane.
    Type: String
  BastionKeyPairName:
    Description: Name of an existing key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern : ".+"
  BastionInstanceType:
    Type: String
    Default: t3.medium
    Description : Instance type for a bastion host.
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t3.small
      - t3.medium
      - t3.large
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "vpc-${AWS::StackName}"

  ### IGW for the VPC
  VpcIgw:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "igw-${AWS::StackName}"
  VpcIgwAattach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref VpcIgw

  #### Subnet-PublicMgmt #####
  PubMgmtSubnetAz1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PubMgmtSubnetAz1Cidr
      AvailabilityZone: !Select ['0', !Ref AvailabilityZones]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: !Sub "pubMgmtAz1"
  PubMgmtSubnetAz2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PubMgmtSubnetAz2Cidr
      AvailabilityZone: !Select ['1', !Ref AvailabilityZones]
      Tags:
        - Key: kubernetes.io/role/elb
          Value: 1
        - Key: Name
          Value: !Sub "pubMgmtAz2"
  PubMgmtSubnetRt:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "pubMgmt-SubnetRt-${AWS::StackName}"
  PubMgmtRtDfltRt:
    Type: 'AWS::EC2::Route'
    DependsOn: VpcIgwAattach
    Properties:
      RouteTableId: !Ref PubMgmtSubnetRt
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcIgw
  PubMgmtAz1RtAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubMgmtSubnetAz1
      RouteTableId: !Ref PubMgmtSubnetRt
  PubMgmtAz2RtAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PubMgmtSubnetAz2
      RouteTableId: !Ref PubMgmtSubnetRt

  ### NATGWs for the VPC
  EipNatGwAz1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: Vpc
  NatGatewayAz1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EipNatGwAz1.AllocationId'
      SubnetId: !Ref PubMgmtSubnetAz1
      Tags:
        - Key: Name
          Value: !Sub "natGwAz1-${AWS::StackName}"

  EipNatGwAz2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: Vpc
  NatGatewayAz2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EipNatGwAz2.AllocationId'
      SubnetId: !Ref PubMgmtSubnetAz2
      Tags:
        - Key: Name
          Value: !Sub "natGwAz2-${AWS::StackName}"

  #### Subnet-PrivK8s #####
  PrivK8sSubnetAz1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivK8sSubnetAz1Cidr
      AvailabilityZone: !Select ['0', !Ref AvailabilityZones]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: Name
          Value: !Sub "PrivK8sAz1"
  PrivK8sSubnetAz2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivK8sSubnetAz2Cidr
      AvailabilityZone: !Select ['1', !Ref AvailabilityZones]
      Tags:
        - Key: kubernetes.io/role/internal-elb
          Value: 1
        - Key: Name
          Value: !Sub "PrivK8sAz2"

  ### Subnet Route Table for Private Subnets
  PrivK8sAz1SubnetRt:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "PrivK8sAz1SubnetRt-${AWS::StackName}"
  PrivK8sAz2SubnetRt:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "PrivK8sAz2SubnetRt-${AWS::StackName}"
  PrivK8sAz1DfltRt:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivK8sAz1SubnetRt
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayAz1
  PrivK8sAz2DfltRt:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivK8sAz2SubnetRt
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayAz2
  PrivK8sAz1RtAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivK8sSubnetAz1
      RouteTableId: !Ref PrivK8sAz1SubnetRt
  PrivK8sAz2RtAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivK8sSubnetAz2
      RouteTableId: !Ref PrivK8sAz2SubnetRt

  ### Create Multus Subnets and route table
  MultusSubnet1Az1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref MultusSubnet1Az1Cidr
      AvailabilityZone: !Select ['0', !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "Multus1Az1"
  MultusSubnet2Az1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref MultusSubnet2Az1Cidr
      AvailabilityZone: !Select ['0', !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "Multus2Az1"
  MultusSubnet1Az2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref MultusSubnet1Az2Cidr
      AvailabilityZone: !Select ['1', !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "Multus1Az2"
  MultusSubnet2Az2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref MultusSubnet2Az2Cidr
      AvailabilityZone: !Select ['1', !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "Multus2Az2"
  ### Subnet Route Table for Multus Subnets
  MultusAz1SubnetRt:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "MultusAz1SubnetRt-${AWS::StackName}"
  MultusAz2SubnetRt:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub "MultusAz2SubnetRt-${AWS::StackName}"
  MultusAz1DfltRt:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MultusAz1SubnetRt
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayAz1
  MultusAz2DfltRt:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref MultusAz2SubnetRt
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGatewayAz2
  Multus1RtAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MultusSubnet1Az1
      RouteTableId: !Ref MultusAz1SubnetRt
  Multus1RtAssoc2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MultusSubnet2Az1
      RouteTableId: !Ref MultusAz1SubnetRt
  Multus2RtAssoc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MultusSubnet1Az2
      RouteTableId: !Ref MultusAz2SubnetRt
  Multus2RtAssoc2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref MultusSubnet2Az2
      RouteTableId: !Ref MultusAz2SubnetRt
  MultusSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Multus Subnets (sig/up)
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub "multus-Sg"


  ### Bastion Host ###
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: '0.0.0.0/0'
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: !Sub "bastion-Sg-${AWS::StackName}"

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref BastionKeyPairName
      NetworkInterfaces:
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet:
          - !Ref BastionSecurityGroup
        SubnetId: !Ref PubMgmtSubnetAz1
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: Name
          Value: !Sub "BastionHost-${AWS::StackName}"

  ## EKS cluster ##
  EksIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub "eksIamRole-${AWS::StackName}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  EksControlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref Vpc
  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "eks-${AWS::StackName}"
      RoleArn: !GetAtt EksIamRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EksControlSecurityGroup
        SubnetIds:
          - !Ref PubMgmtSubnetAz1
          - !Ref PubMgmtSubnetAz2
          - !Ref PrivK8sSubnetAz1
          - !Ref PrivK8sSubnetAz2
    DependsOn: [EksIamRole, PubMgmtSubnetAz1, PubMgmtSubnetAz2, PrivK8sSubnetAz1, PrivK8sSubnetAz2, EksControlSecurityGroup]

  EksAdminRoleForLambda:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub "eksAdminRoleForLambda-${AWS::StackName}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  EksAdminPolicyForLambda:
    Type: "AWS::IAM::Policy"
    DependsOn: EksAdminRoleForLambda
    Properties:
      PolicyName: !Sub "eksAdminPolicyForLambda-${AWS::StackName}"
      Roles: [
          !Ref EksAdminRoleForLambda
        ]
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: [
                "cloudformation:*"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "eks:*"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "iam:CreateInstanceProfile",
                "iam:DeleteInstanceProfile",
                "iam:GetRole",
                "iam:GetInstanceProfile",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:AttachRolePolicy",
                "iam:PutRolePolicy",
                "iam:AddRoleToInstanceProfile",
                "iam:PassRole",
                "iam:DetachRolePolicy",
                "iam:DeleteRolePolicy",
                "iam:GetRolePolicy"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "lambda:*"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                s3:GetObject
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "events:PutRule",
                "events:DescribeRule",
                "events:RemoveTargets",
                "events:PutTargets",
                "events:DeleteRule"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "serverlessrepo:GetCloudFormationTemplate",
                "serverlessrepo:CreateCloudFormationTemplate"
              ]
              Resource: "*"
            - Effect: Allow
              Action: [
                "ssm:GetParameters",
                "ssm:GetParameter"
              ]
              Resource: "arn:aws:ssm:*:*:parameter/aws/service/eks/optimized-ami/*"


Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"
  VpcCidr:
    Description: VPC CIDR
    Value: !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub "${AWS::StackName}-VpcCidr"
  BastionPublicIp:
    Description: BastionHost Public IP
    Value: !GetAtt BastionInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-BastionPublicIp"
  EksCluster:
    Description: EKS Cluster Name
    Value: !Ref EksCluster
    Export:
      Name: !Sub "${AWS::StackName}-EksCluster"
  EksAdminRoleForLambdaArn:
    Description: EKS Admin Role For Lambda (ARN)
    Value: !GetAtt EksAdminRoleForLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EksAdminRoleForLambdaArn"
  EksControlSecurityGroup:
    Description: EKS Control plane security group
    Value: !Ref EksControlSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EksControlSecurityGroup"
  PubMgmtSubnetAz1:
    Description: EKS WorkerNode PublicSubnet at AZ1. This will be used for management network.
    Value: !Ref PubMgmtSubnetAz1
    Export:
      Name: !Sub "${AWS::StackName}-PubMgmtSubnetAz1"
  PubMgmtSubnetAz2:
    Description: EKS WorkerNode PublicSubnet at AZ2. This will be used for management network.
    Value: !Ref PubMgmtSubnetAz2
    Export:
      Name: !Sub "${AWS::StackName}-PubMgmtSubnetAz2"
  PrivK8sSubnetAz1:
    Description: EKS WorkerNode PrivateSubnet at AZ1. This will be used for NF's service network.
    Value: !Ref PrivK8sSubnetAz1
    Export:
      Name: !Sub "${AWS::StackName}-PrivK8sSubnetAz1"
  PrivK8sSubnetAz2:
    Description: EKS WorkerNode PrivateSubnet at AZ2. This will be used for NF's service network.
    Value: !Ref PrivK8sSubnetAz2
    Export:
      Name: !Sub "${AWS::StackName}-PrivK8sSubnetAz2"
  MultusSubnet1Az1:
    Description: BGP Speaker Primary Subnet at AZ1.
    Value: !Ref MultusSubnet1Az1
    Export:
      Name: !Sub "${AWS::StackName}-MultusSubnet1Az1"
  MultusSubnet2Az1:
    Description: BGP Speaker Secondary Subnet at AZ1.
    Value: !Ref MultusSubnet2Az1
    Export:
      Name: !Sub "${AWS::StackName}-MultusSubnet2Az1"
  MultusSubnet1Az2:
    Description: BGP Speaker Primary Subnet at AZ2.
    Value: !Ref MultusSubnet1Az2
    Export:
      Name: !Sub "${AWS::StackName}-MultusSubnet1Az2"
  MultusSubnet2Az2:
    Description: BGP Speaker Primary Subnet at AZ2.
    Value: !Ref MultusSubnet2Az2
    Export:
      Name: !Sub "${AWS::StackName}-MultusSubnet2Az2"
